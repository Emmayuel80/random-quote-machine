{"version":3,"sources":["logo.svg","Components/QuoteBox.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","root","minWidth","title","fontSize","pos","marginBottom","QuoteBox","useState","quotesStorage","setQuotesStorage","quoteSelected","setQuoteSelected","classes","useEffect","getQuotes","a","fetch","response","json","data","quotes","getRandomIndex","length","max","Math","floor","random","Card","id","className","CardContent","Typography","color","gutterBottom","variant","component","quote","author","CardActions","Button","size","onClick","href","encodeURIComponent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAAe,I,sFCQTA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,IAAY,IAAD,EACSC,mBAAS,IADlB,mBAC1BC,EAD0B,KACXC,EADW,OAESF,mBAAS,IAFlB,mBAE1BG,EAF0B,KAEXC,EAFW,KAG3BC,EAAUd,IAEhBe,qBAAU,WACRC,MACC,IACH,IAAMA,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,0IADb,cACVC,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBV,EAAiBU,GACjBR,EAAiBQ,EAAKC,OAAOC,EAAeF,EAAKC,OAAOE,UAJxC,2CAAH,qDAMTD,EAAiB,SAACE,GACtB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,KAM/C,OACE,eAACI,EAAA,EAAD,CAAMC,GAAG,YAAYC,UAAWjB,EAAQZ,KAAxC,UACE,eAAC8B,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYF,UAAWjB,EAAQV,MAAO8B,MAAM,gBAAgBC,cAAY,EAAxE,8BAGA,cAACF,EAAA,EAAD,CAAYH,GAAG,OAAOM,QAAQ,KAAKC,UAAU,KAA7C,SACGzB,EAAc0B,QAEjB,cAACL,EAAA,EAAD,CAAYF,UAAWjB,EAAQR,IAAK4B,MAAM,gBAA1C,gBAGA,cAACD,EAAA,EAAD,CAAYH,GAAG,SAASM,QAAQ,QAAQC,UAAU,IAAlD,SACKzB,EAAc2B,YAGrB,eAACC,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQX,GAAG,YAAYY,KAAK,QAAQC,QAAS,WApB/C9B,EAAiBH,EAAcY,OAAOC,EAAeb,EAAcY,OAAOE,WAoBxE,+BACA,cAACiB,EAAA,EAAD,CAAQX,GAAG,cAAcM,QAAQ,YAAYF,MAAM,UAAUU,KAAM,8EACnEC,mBAAmB,IAAMjC,EAAc0B,MAAQ,KAAO1B,EAAc2B,QADpE,yBChDSO,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAACvB,EAAD,OCMSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6b7a28da.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState, useEffect, useLayoutEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function QuoteBox() {\r\n  const [quotesStorage, setQuotesStorage] = useState({});\r\n  const [quoteSelected, setQuoteSelected] = useState({});\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    getQuotes();\r\n  }, [])\r\n  const getQuotes = async () => {\r\n    const response = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json');\r\n    const data = await response.json();\r\n    setQuotesStorage(data)\r\n    setQuoteSelected(data.quotes[getRandomIndex(data.quotes.length)])\r\n  }\r\n  const getRandomIndex = (max) => {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n  }\r\n  const selectQuote = () =>{\r\n    setQuoteSelected(quotesStorage.quotes[getRandomIndex(quotesStorage.quotes.length)]);\r\n  }\r\n\r\n  return (\r\n    <Card id=\"quote-box\" className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          Quote of the Day\r\n        </Typography>\r\n        <Typography id=\"text\" variant=\"h5\" component=\"h2\">\r\n          {quoteSelected.quote}\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          by\r\n        </Typography>\r\n        <Typography id=\"author\" variant=\"body2\" component=\"p\">\r\n            {quoteSelected.author}\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions>\r\n      <Button id=\"new-quote\" size=\"small\" onClick={() => selectQuote()}>See another Quote</Button>\r\n      <Button id=\"tweet-quote\" variant=\"contained\" color=\"primary\" href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' +\r\n      encodeURIComponent('\"' + quoteSelected.quote + '\" ' + quoteSelected.author)}>\r\n        Tweet\r\n      </Button>\r\n        \r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","import logo from './logo.svg';\nimport './App.css';\nimport QuoteBox from './Components/QuoteBox';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <QuoteBox  />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}